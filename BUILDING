class Arguments {
  List<String> list = new ArrayList<>();
  Arguments add(Object o) {
    list.add(String.valueOf(o));
    return this;
  }
  Arguments addAll(String... strings) {
    for(var o : strings) add(o);
    return this;
  }
  Arguments addPath(Predicate<Path> predicate, String... roots) throws Exception {
    var paths = new ArrayList<String>();
    for (var root : roots) {
      Files.walk(Paths.get(root)).filter(predicate).map(Object::toString).forEach(paths::add);
    }
    add(String.join(File.pathSeparator, paths));
    return this;
  }
  Arguments addPath(String... paths) {
    add(String.join(File.pathSeparator, paths));
    return this;
  }
  Arguments addAllFiles(String root, String extension) throws Exception {
    return addAllFiles(root, path -> path.getFileName().toString().endsWith(extension));
  }
  Arguments addAllFiles(String root, Predicate<Path> predicate) throws Exception {
    Files.walk(Paths.get(root)).filter(predicate).forEach(this::add);
    return this;
  }
  String[] toArray() {
    return list.toArray(new String[0]);
  }
}

int run(String tool, String... args) {
  printCommandDetails("run", tool, args);
  return java.util.spi.ToolProvider.findFirst(tool).get().run(System.out, System.err, args);
}

int env(String executable, String... args) throws Exception {
  var win = System.getProperty("os.name").toLowerCase().contains("win");
  if (win) return exe("cmd", new Arguments().add("/C").add(executable).addAll(args).toArray());
  return exe("/usr/bin/env", new Arguments().add("--").add(executable).addAll(args).toArray());
}

int exe(String executable, String... args) throws Exception {
  printCommandDetails("exe", executable, args);
  var processBuilder = new ProcessBuilder(executable);
  Arrays.stream(args).forEach(processBuilder.command()::add);
  processBuilder.redirectErrorStream(true);
  var process = processBuilder.start();
  process.getInputStream().transferTo(System.out);
  return process.waitFor();
}

void printCommandDetails(String context, String command, String... args) {
  if (args.length < 2) {
    System.out.printf("[%s] %s%s%n", context, command, (args.length == 1 ? " " + args[0] : ""));
    System.out.println();
    return;
  }
  System.out.printf("[%s] %s with %d arguments%n", context, command, args.length);
  var simple = true;
  int indent = 8;
  for (String arg : args) {
    indent = simple ? 8 : arg.startsWith("-") ? 8 : 10;
    simple = !arg.startsWith("-");
    if (arg.length() > 100) {
      if (arg.contains(File.pathSeparator)) {
        for (String path : arg.split(File.pathSeparator)) {
          System.out.printf("%-10s%s%n", "", path);
        }
        continue;
      }
      arg = arg.substring(0, 96) + "[...]";
    }
    System.out.printf("%-" + indent + "s%s%n", "", arg);
  }
  System.out.println();
}

void del(String directory) throws Exception {
  System.out.printf("[del] %s%n", directory);
  Path root = Paths.get(directory);
  if (Files.notExists(root)) {
    return;
  }
  try (Stream<Path> stream = Files.walk(root)) {
    Stream<Path> selected = stream.sorted((p, q) -> -p.compareTo(q));
    for (Path path : selected.collect(Collectors.toList())) {
      Files.deleteIfExists(path);
    }
  }
}

Path get(String directory, URI uri) throws Exception {
  var uriPath = uri.getPath();
  int begin = uriPath.lastIndexOf('/') + 1;
  var file = uriPath.substring(begin).split("\\?")[0].split("#")[0];
  var folder = Paths.get(directory);
  var target = folder.resolve(file);
  if (Files.exists(target)) {
    return target;
  }
  System.out.printf("[get] %s%n", target);
  Files.createDirectories(folder);
  try (var sourceStream = uri.toURL().openStream(); var targetStream = Files.newOutputStream(target)) {
    sourceStream.transferTo(targetStream);
  }
  return target;
}

Path get(String directory, String group, String artifact, String version) throws Exception {
  var repo = "https://repo1.maven.org/maven2";
  var file = artifact + "-" + version + ".jar";
  var uri = URI.create(String.join("/", repo, group.replace('.', '/'), artifact, version, file));
  return get(directory, uri);
}
