name: CI

on:
  push:
    branches: [ main, 'releases/*' ]
  pull_request:
    branches: [ '*' ]
  workflow_dispatch:

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.version.outputs.sha }}
      tag: ${{ steps.version.outputs.tag }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: 'Compute version string'
        id: version
        run: |
          SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          TAG=$(<VERSION)-ea
          VERSION=${TAG}+${SHA}
          echo "::set-output name=sha::${SHA}"
          echo "::set-output name=tag::${TAG}"
          echo "::set-output name=version::${VERSION}"

  build:
    needs: [ setup ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK'
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: 'zulu'
      - name: 'Bootstrap Bach'
        run: java --show-version bach/bootstrap.java
      - name: 'Build Bach ${{ needs.setup.outputs.version }}'
        run: .bach/bin/bach --project-version ${{ needs.setup.outputs.version }} build
      - name: 'Upload artifact ${{ github.event.repository.name }}-build-${{ needs.setup.outputs.version }}'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-build-${{ needs.setup.outputs.version }}
          path: |
            LICENSE
            .bach/workspace/logbook.md
            .bach/workspace/deploy
            .bach/workspace/documentation
            .bach/workspace/modules
            .bach/workspace/reports

  deploy-to-releases:
    needs: [ setup, build ]
    if: github.event_name == 'push' && github.repository == 'sormuras/bach' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Download build artifact ${{ needs.setup.outputs.version }}'
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-build-${{ needs.setup.outputs.version }}
      - name: 'Release ${{ needs.setup.outputs.tag }}'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          automatic_release_tag: ${{ needs.setup.outputs.tag }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          title: "Bach ${{ needs.setup.outputs.version }}"
          files: |
            .bach/workspace/modules/*.jar

  deploy-to-api-repository:
    needs: [ setup, build ]
    if: github.event_name == 'push' && github.repository == 'sormuras/bach' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out sormuras/api repository'
        uses: actions/checkout@v2
        with:
          repository: sormuras/api
          token: ${{ secrets.PAT }}
      - name: 'Download build artifact ${{ needs.setup.outputs.version }}'
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-build-${{ needs.setup.outputs.version }}
      - name: 'Sync API documentation'
        run: |
          mkdir --parents ${{ github.event.repository.name }}/${{ needs.setup.outputs.tag }}
          rsync --archive --delete --verbose .bach/workspace/documentation/api/ ${{ github.event.repository.name }}/${{ needs.setup.outputs.tag }}
      - name: 'Check for modifications'
        id: diff
        run: |
          git status
          echo ::set-output name=modified::$(if [[ -z $(git status --porcelain) ]]; then echo 'false'; else echo 'true'; fi)
      - name: 'Commit and push changes'
        if: steps.diff.outputs.modified == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit --message 'Update API documentation of ${{ github.event.repository.name }} to ${{ needs.setup.outputs.version }}'
          git push

  play-prelude:
    needs: [ setup, build, deploy-to-releases ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Install JDK 16 or later'
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: 'zulu'
      - name: 'Verify java and jshell are available'
        run: java --version && jshell --version
      - name: 'Create directory air and change into it'
        run: mkdir air && cd air
      - name: 'Initialize Bach using JShell''s load file feature'
        working-directory: air
        run: jshell -R-Dbach-version=17-ea https://git.io/bach-init
      - name: 'Create modular Java project'
        working-directory: air
        run: |
          echo 'module air {}' >> module-info.java
          mkdir air
          echo 'package air;'                                >> air/Main.java
          echo 'class Main {'                                >> air/Main.java
          echo '  public static void main(String... args) {' >> air/Main.java
          echo '     System.out.println("Aria");'            >> air/Main.java
          echo '  }'                                         >> air/Main.java
          echo '}'                                           >> air/Main.java
      - name: 'Build with Bach'
        working-directory: air
        run: .bach/bin/bach build
      - name: 'Run program'
        working-directory: air
        run: .bach/workspace/image/bin/java --module air

  use-action:
    needs: [ setup, build, deploy-to-releases ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: 'Install JDK 16 or later'
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: 'zulu'
      - name: 'Build with Bach''s GitHub Action'
        uses: sormuras/bach-build@v1
        with:
          working-directory: test.projects/JigsawQuickStartWorld
          bach-version: 17-ea
      - name: 'Run program'
        working-directory: test.projects/JigsawQuickStartWorld
        run: .bach/workspace/image/bin/java --module com.greetings
